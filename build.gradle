plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'  // JaCoCo 플러그인 추가
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

sonar {
	properties {
		property "sonar.projectKey", "leeys9423_tdd-practice"
		property "sonar.organization", "youngsub"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths",
				"${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
}

dependencies {
	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// lombok
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Lombok (For Test)
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// H2
	runtimeOnly 'com.h2database:h2'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport  // 테스트 후 JaCoCo 리포트 생성
}

// JaCoCo 설정 추가
tasks.jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/BoardApplication.class"  // 애플리케이션 메인 클래스 제외
			])
		}))
	}
}